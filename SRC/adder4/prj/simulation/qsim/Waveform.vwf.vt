// Copyright (C) 2018  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "07/18/2025 13:51:39"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          adder4
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module adder4_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [3:0] input_a;
reg [3:0] input_b;
reg input_c;
// wires                                               
wire out_c;
wire [3:0] out_d;

// assign statements (if any)                          
adder4 i1 (
// port map - connection between master ports and signals/registers   
	.input_a(input_a),
	.input_b(input_b),
	.input_c(input_c),
	.out_c(out_c),
	.out_d(out_d)
);
initial 
begin 
#1000000 $finish;
end 
// input_a[ 3 ]
initial
begin
	input_a[3] = 1'b0;
end 
// input_a[ 2 ]
initial
begin
	input_a[2] = 1'b1;
end 
// input_a[ 1 ]
initial
begin
	input_a[1] = 1'b0;
end 
// input_a[ 0 ]
initial
begin
	input_a[0] = 1'b1;
end 
// input_b[ 3 ]
initial
begin
	input_b[3] = 1'b1;
end 
// input_b[ 2 ]
initial
begin
	input_b[2] = 1'b1;
end 
// input_b[ 1 ]
initial
begin
	input_b[1] = 1'b0;
end 
// input_b[ 0 ]
initial
begin
	input_b[0] = 1'b0;
end 

// input_c
initial
begin
	input_c = 1'b1;
end 
endmodule

